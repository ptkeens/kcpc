generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

// Add Pothos generator for GraphQL types
generator pothos {
  provider = "prisma-pothos-types"
  output   = "../api/graphql/generated.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  email     String
  username  String
  password  String // Hashed password
  isEnabled Boolean  @default(true) @map("is_enabled")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  Manufacturers Manufacturer[]
  KitFamily     KitFamily[]
  Kit           Kit[]

  @@unique([email])
  @@unique([username])
  @@map("users")
}

model Manufacturer {
  id        String   @id @default(uuid()) @db.Uuid
  name      String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Foreign keys
  addedByUserId String @map("added_by_user_id") @db.Uuid

  // Relations
  KitFamily KitFamily[]
  User      User        @relation(fields: [addedByUserId], references: [id])

  @@index([name])
  @@index([addedByUserId])
  @@map("manufacturers")
}

model KitFamily {
  id   String @id @default(uuid()) @db.Uuid
  name String

  // Foreign keys
  manufacturerId String @map("manufacturer_id") @db.Uuid
  addedByUserId  String @map("added_by_user_id") @db.Uuid

  // Relations
  Manufacturer Manufacturer @relation(fields: [manufacturerId], references: [id])
  Kit          Kit[]
  User         User         @relation(fields: [addedByUserId], references: [id])

  @@index([manufacturerId])
  @@index([addedByUserId])
  @@map("kit_family")
}

model Kit {
  id   String @id @default(uuid()) @db.Uuid
  name String
  year Int

  // Foreign keys
  kitFamilyId   String @map("kit_family_id") @db.Uuid
  addedByUserId String @map("added_by_user_id") @db.Uuid

  // Relations
  KitFamily KitFamily @relation(fields: [kitFamilyId], references: [id])
  User      User      @relation(fields: [addedByUserId], references: [id])
  PartKit   PartKit[]

  @@index([kitFamilyId])
  @@index([addedByUserId])
  @@map("kits")
}

model Part {
  id                     String  @id @default(uuid()) @db.Uuid
  name                   String
  // the manufacturer part number may differ from the part number assigned by the kit
  manufacturerPartNumber String? @map("manufacturer_part_number")
  description            String?
  s3Key                  String? @map("s3_key")
  weight                 Float?

  // Relations
  PartKit PartKit[]

  @@map("parts")
}

model PartKit {
  id            String @id @default(uuid()) @db.Uuid
  // this is the part number the kit assigns
  kitPartNumber String @map("kit_part_number")

  // Foreign keys
  partId String @map("part_id") @db.Uuid
  kitId  String @map("kit_id") @db.Uuid

  // Relations
  Part                   Part                     @relation(fields: [partId], references: [id])
  Kit                    Kit                      @relation(fields: [kitId], references: [id])
  PartGroupPartKit       PartGroupPartKit[]
  SourceConnections      PartConnection[]         @relation("SourceConnections")
  TargetConnections      PartConnection[]         @relation("TargetConnections")
  PartConnectionFastener PartConnectionFastener[]

  @@index([partId])
  @@index([kitId])
  @@map("part_kits")
}

model PartGroup {
  id           String  @id @default(uuid()) @db.Uuid
  name         String
  description  String?
  displayOrder Int     @map("display_order")

  // Foreign Keys
  kitId            String             @map("kit_id") @db.Uuid
  PartGroupPartKit PartGroupPartKit[]

  @@index([kitId])
  @@map("part_groups")
}

model PartGroupPartKit {
  id          String @id @default(uuid()) @db.Uuid
  partGroupId String @map("part_group_id") @db.Uuid
  partKitId   String @map("part_kit_id") @db.Uuid
  quantity    Int

  // Relations
  PartGroup PartGroup @relation(fields: [partGroupId], references: [id])
  PartKit   PartKit   @relation(fields: [partKitId], references: [id])

  @@index([partGroupId])
  @@index([partKitId])
  @@map("part_group_part_kits")
}

model PartConnection {
  id          String  @id @default(uuid()) @db.Uuid
  description String?

  // The two parts being connected
  sourcePartKitId String @map("source_part_kit_id") @db.Uuid
  targetPartKitId String @map("target_part_kit_id") @db.Uuid

  // Relations
  sourcePart PartKit @relation("SourceConnections", fields: [sourcePartKitId], references: [id])
  targetPart PartKit @relation("TargetConnections", fields: [targetPartKitId], references: [id])

  // Fasteners join table
  PartConnectionFastener PartConnectionFastener[]

  @@index([sourcePartKitId])
  @@index([targetPartKitId])
  @@map("part_connections")
}

model PartConnectionFastener {
  id                String  @id @default(uuid()) @db.Uuid
  partConnectionId  String  @map("part_connection_id") @db.Uuid
  fastenerPartKitId String  @map("fastener_part_kit_id") @db.Uuid
  quantity          Int
  torqueValue       Float?  @map("torque_value")
  torqueUnit        String? @map("torque_unit") // e.g., "ft-lb", "Nm"
  notes             String?

  // Relations
  partConnection PartConnection @relation(fields: [partConnectionId], references: [id])
  fastener       PartKit        @relation(fields: [fastenerPartKitId], references: [id])

  @@index([partConnectionId])
  @@index([fastenerPartKitId])
  @@map("part_connection_fasteners")
}
